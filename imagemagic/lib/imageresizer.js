// Generated by CoffeeScript 1.6.3
var IR, im;

im = require('imagemagick');

IR = {
  allowedImageFormats: 'jpg jpeg gif png'
};

/* getImageFormatFromFilename(filename)
  Given an image file e.g: kittens.jpg
  extract just the file/image format e.g: jpg
  @param filename   the filename
  @return format 
  or throw error "File format #{format} is invalid!"
  so we don't try to process a non-image file!
*/


IR.getImageFormatFromFilename = function(filename) {
  var fileparts, format;
  fileparts = filename.split('.');
  if (fileparts.length > 1) {
    format = fileparts[fileparts.length - 1].toLowerCase();
  } else {
    format = false;
  }
  if (IR.allowedImageFormats.indexOf(format) >= 0) {
    return format;
  } else {
    return false;
  }
};

/* stripDimensionsFromSourceImageName(file, format)
  we don't want the sunset800x600.jpg to become sunset800x600-400x300.jpg
  so we need to strip the 800x600 from the original filename
  and then call the re-sized image sunset-400x300.jpg
  but not strip out the digits in andre3000.jpg or 2000ad.jpg 
  @param file    the filename of the original file
  @param format  the file format e.g. 'jpg' or 'png'
  @return nodimensions + format or simply the original file
*/


IR.stripDimensionsFromSourceImageName = function(file, format) {
  var match, nodimensions;
  match = /((\d+[x\-_]+\d+).(\bjpg\b|\bjpeg\b|\bpng\b|\bgif\b))/i.exec(file);
  if (match !== null && match.index > 0) {
    nodimensions = file.substring(0, match.index);
    return file = "" + nodimensions + "." + format;
  } else {
    return file;
  }
};

/* getFilenameWithoutExtension(filename, format)
  returns just the filename e.g. 'kitten.jpg' >> 'kitten'
  we use this to apply the dimmensions to re-sized image filename
  e.g. kitten.jpg >> 'kitten' + '-400x300' .'jpg'
  the reason we have a method for this instead of just stripping the 
  format off the filename is for the instances where people call their
  file kitten.jpg.jpg don't laugh, it happens more often than you think!
  @param filename the name of the file e.g. 'kitten.jpg'
  @param format the file format e.g. '.jpg'
  @return filenameWithoutExtension e.g. 'kitten'
*/


IR.getFilenameWithoutExtension = function(filename, format) {
  var filenameWithoutExtension, lastFowardSlash, lastOccurenceOfExtension;
  lastFowardSlash = filename.lastIndexOf('/');
  if (lastFowardSlash !== null && lastFowardSlash > 0) {
    filename = filename.substring(lastFowardSlash + 1, filename.length);
  }
  filename = IR.stripDimensionsFromSourceImageName(filename, format);
  lastOccurenceOfExtension = filename.lastIndexOf("." + format);
  filenameWithoutExtension = filename.substring(0, lastOccurenceOfExtension);
  return filenameWithoutExtension;
};

/* getHeightFromWidthUsingAspectRatio(oi, width, height)
  if only spplied with either width or height we can calculate 
  width from height or height from width using the original image's (oi)
  aspect ratio. (which we expect to be a property oi.aspectRatio)
  @param oi an object containing properties of the original image (aspectRatio)
  @param width (optional) the width of the image
  @param height (optional) the height of the image
  @return ri an object containing the width & height of the re-sized image (ri)
          or false if more than one parameter is not supplied
*/


IR.getHeightFromWidthUsingAspectRatio = function(oi, width, height) {
  var ri;
  if (typeof oi === "undefined" || oi === void 0 || oi.aspectRatio === void 0) {
    return false;
  } else {
    ri = {};
    if (typeof width !== "undefined" && width !== void 0 && parseInt(width) > 0) {
      ri.width = parseInt(width);
      ri.height = Math.round(ri.width / oi.aspectRatio);
    } else if (typeof height !== "undefined" && height !== void 0 && parseInt(height) > 0) {
      ri.height = parseInt(height);
      ri.width = Math.round(ri.height * oi.aspectRatio);
    } else {
      return false;
    }
    return ri;
  }
};

/* getOriginalImageAttributes(filename, callback)
  Using the imagemagic (im) module's identify method to get
  the original image (oi) attributes
*/


IR.getOriginalImageAttributes = function(filename, callback) {
  return im.identify(filename, function(err, ia) {
    console.log("Filename: " + filename);
    console.log(ia);
    return callback(ia);
  });
};

module.exports = IR;
