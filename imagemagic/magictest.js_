// Generated by CoffeeScript 1.6.3
(function() {
  var allowedImageFormats, client, findOrDownloadImageFile, fs, getFilenameWithoutExtension, getHeightFromWidthUsingAspectRatio, getImageFormatFromFilename, getOriginalImageData, http, im, localKittens, path, redis, remoteFile, resizeImage, saveResizeDataToRedis, stripDimensionsFromSourceImageName, timeStarted,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  im = require('imagemagick');

  fs = require('fs');

  http = require('http');

  redis = require('redis');

  client = redis.createClient();

  client.on("error", function() {
    return console.log("REDIS FAIL");
  });

  allowedImageFormats = ['jpg', 'jpeg', 'gif', 'png'];

  getFilenameWithoutExtension = function(filename, format) {
    var filenameWithoutExtension, lastFowardSlash, lastOccurenceOfExtension;
    lastFowardSlash = filename.lastIndexOf('/');
    if (lastFowardSlash !== null && lastFowardSlash > 0) {
      filename = filename.substring(lastFowardSlash + 1, filename.length);
    }
    filename = stripDimensionsFromSourceImageName(filename, format);
    lastOccurenceOfExtension = filename.lastIndexOf("." + format);
    return filenameWithoutExtension = filename.substring(0, lastOccurenceOfExtension);
  };

  getHeightFromWidthUsingAspectRatio = function(oi, width, height) {
    var ri;
    ri = {};
    if (typeof width !== "undefined" && width !== void 0 && parseInt(width) > 0) {
      ri.width = parseInt(width);
      ri.height = Math.round(ri.width / oi.aspectRatio);
    } else if (typeof height !== "undefined" && height !== void 0 && parseInt(height) > 0) {
      ri.height = parseInt(height);
      ri.width = Math.round(ri.height * oi.aspectRatio);
    } else {
      throw {
        name: "NoResizeWidthOrHeight",
        message: "No Resize Width Supplied!"
      };
    }
    console.log("Ri W: " + ri.width + "  /  H: " + ri.height + "  =  A: " + oi.aspectRatio);
    return ri;
  };

  getImageFormatFromFilename = function(filename) {
    var fileparts, format;
    fileparts = filename.split('.');
    format = fileparts[fileparts.length - 1].toLowerCase();
    if (__indexOf.call(allowedImageFormats, format) >= 0) {
      return format;
    } else {
      throw {
        name: "BadFileFormat",
        message: "File format " + format + " is invalid!"
      };
    }
  };

  getOriginalImageData = function(filename, width, height, callback) {
    return im.identify(filename, function(err, oi) {
      var ri;
      if (err) {
        throw err;
      }
      oi.filename = filename;
      oi.format = getImageFormatFromFilename(oi.filename);
      oi.aspectRatio = oi.width / oi.height;
      oi.filenameWithoutExtension = getFilenameWithoutExtension(filename, oi.format);
      ri = getHeightFromWidthUsingAspectRatio(oi, width, height);
      return typeof callback === "function" ? callback(oi, ri) : void 0;
    });
  };

  stripDimensionsFromSourceImageName = function(filename, format) {
    var match, nodimensions;
    match = /((\d+[x\-_]+\d+).(\bjpg\b|\bjpeg\b|\bpng\b|\bgif\b))/i.exec(filename);
    if (match !== null && match.index > 0) {
      nodimensions = filename.substring(0, match.index);
      return filename = "" + nodimensions + "." + format;
    } else {
      return filename;
    }
  };

  resizeImage = function(oi, ri, existingData) {
    if (existingData == null) {
      existingData = {};
    }
    ri.path = __dirname + '/resized-images/';
    ri.filename = "" + ri.path + oi.filenameWithoutExtension + "-" + ri.width + "x" + ri.height + "." + oi.format;
    console.log(ri.filename);
    return im.resize({
      srcPath: oi.filename,
      dstPath: ri.filename,
      width: ri.width
    }, function(err, stdout, stderr) {
      if (err) {
        return console.error(err.stack || err);
      }
      console.log("Time taken for resize: " + ((new Date) - timeStarted) + " ms  - " + ri.filename);
      saveResizeDataToRedis(oi, ri, existingData);
      return im.identify(['-format', '%b', ri.filename], function(err, r) {
        if (err) {
          throw err;
        }
        return console.log('\n');
      });
    });
  };

  saveResizeDataToRedis = function(oi, ri, existingData) {
    var k, lastFowardSlash, obj, originalFile, resizeData, v, _i, _len;
    if (existingData == null) {
      existingData = {};
    }
    lastFowardSlash = oi.filename.lastIndexOf('/');
    originalFile = oi.filename.substring(lastFowardSlash + 1, oi.filename.length);
    resizeData = {
      aspectRatio: oi.aspectRatio
    };
    resizeData[ri.width] = {
      localFilename: ri.filename,
      created: new Date()
    };
    if (existingData !== null && existingData.length > 0) {
      console.log("                            >>  attempt merge existingData");
      for (_i = 0, _len = existingData.length; _i < _len; _i++) {
        obj = existingData[_i];
        for (k in obj) {
          v = obj[k];
          resizeData[k] = v;
        }
      }
    }
    return client.set(originalFile, JSON.stringify(resizeData), redis.print);
  };

  findOrDownloadImageFile = function(filename, width, height, callback) {
    var file, lastFowardSlash, localFilename, originalFile, path, request;
    lastFowardSlash = filename.lastIndexOf('/');
    originalFile = filename.substring(lastFowardSlash + 1, filename.length);
    client.get(originalFile, function(err, reply) {
      var data, oi, ri;
      if (err) {
        return console.log("File not in Redis: " + err);
      } else {
        data = JSON.parse(reply);
        if (data !== null) {
          console.log("- - - - - - - - - - - - - - Redis HIT for Original File: " + originalFile);
          console.log(data);
          oi = {
            aspectRatio: data.aspectRatio
          };
          ri = getHeightFromWidthUsingAspectRatio(oi, width, height);
          console.log("ri.width = " + ri.width);
          console.log("            typeof  data[ri.width] : " + (typeof data[ri.width]));
          if (data[ri.width] !== null && typeof data[ri.width] !== "undefined") {
            console.log("data[ri.width] length : " + data[ri.width].length);
            console.log(data[ri.width]);
            return data[ri.width];
          } else {
            console.log("                                                          Resize image");
            oi.filename = filename;
            oi.format = getImageFormatFromFilename(oi.filename);
            oi.filenameWithoutExtension = getFilenameWithoutExtension(filename, oi.format);
            return resizeImage(oi, ri, data);
          }
        }
      }
    });
    if (filename.indexOf('http://') === -1) {
      if (fs.existsSync(filename)) {
        return typeof callback === "function" ? callback(filename) : void 0;
      }
    }
    lastFowardSlash = filename.lastIndexOf('/');
    localFilename = filename.substring(lastFowardSlash + 1, filename.length);
    path = __dirname + '/downloaded-images/';
    localFilename = path + localFilename;
    file = fs.createWriteStream(localFilename);
    return request = http.get(filename, function(response) {
      response.pipe(file);
      return file.on('close', function() {
        return typeof callback === "function" ? callback(localFilename) : void 0;
      });
    });
  };

  remoteFile = 'http://www.wollemipine.co.uk/acatalog/Wallpaper_CollectorsEdition800x600.jpg';

  findOrDownloadImageFile(remoteFile, 0, 650, function(localFilename) {
    console.log("Local Filename: " + localFilename);
    return getOriginalImageData(localFilename, 0, 650, function(oi, ri) {
      return resizeImage(oi, ri);
    });
  });

  path = __dirname + '/sample-images/';

  localKittens = path + 'kittens.jpg';

  findOrDownloadImageFile(localKittens, 0, 200, function(localFilename) {
    console.log("Local Filename: " + localFilename);
    return getOriginalImageData(localFilename, 0, 200, function(oi, ri) {
      return resizeImage(oi, ri);
    });
  });

  timeStarted = new Date;

  path = __dirname + '/sample-images/';

  exports.getOriginalImageData = getOriginalImageData;

  exports.resizeImage = resizeImage;

}).call(this);
